{"version":3,"sources":["GetSquareRoot.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","root","marginLeft","GetSquareRoot","classes","useState","loading","setLoading","val","setVal","value","setValue","result","setResult","required","setRequired","onChangeHandler","e","Math","round","target","onClickHandler","a","axios","get","params","input","data","Container","component","maxWidth","CssBaseline","className","TextField","type","fullWidth","id","label","name","autoComplete","autoFocus","onChange","disabled","Button","onClick","CircularProgress","style","class","Box","mt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4658584.chunk.js","sourcesContent":["import React, { useState} from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Designed by Â© '}\r\n      <Link color=\"inherit\" href=\"https://www.linkedin.com/in/khalilurrehmann/\">\r\n        Khalil Ur Rehman\r\n      </Link>\r\n    </Typography>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function GetSquareRoot() {\r\n  const classes = useStyles();\r\n\r\n  const [loading,setLoading] = useState(false);\r\n    const [val,setVal] = useState();\r\n    const [value,setValue] = useState();\r\n    const [result, setResult] = useState();\r\n    const [required, setRequired] = useState();\r\n\r\n    const onChangeHandler = e =>{\r\n        setVal(Math.round(e.target.value));\r\n    }\r\n\r\n    const onClickHandler = async () =>{\r\n      if(val){\r\n        setLoading(true);\r\n        const {data} = await axios.get('https://cors-anywhere.herokuapp.com/https://gxxph4h9l6.execute-api.us-east-1.amazonaws.com/default/front_end_hiring', {\r\n            params:{\r\n                input: val\r\n            }\r\n        });\r\n        setLoading(false);\r\n        setResult(data.result);\r\n        setValue(val);\r\n        setVal('');\r\n        setRequired('');\r\n      }\r\n      else{\r\n        setRequired('This field is required');\r\n      }\r\n    }\r\n\r\n  return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Circadia Health , React Test\r\n        </Typography>\r\n        <form className={classes.form}>\r\n          {\r\n            loading?\r\n            <div>\r\n            <TextField\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"number\"\r\n            label=\"Enter Number to find square root\"\r\n            name=\"number\"\r\n            autoComplete=\"number\"\r\n            autoFocus\r\n            value={val}\r\n            onChange={onChangeHandler}\r\n            disabled\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onClickHandler}\r\n            disabled\r\n          >\r\n            Calculate Square Root\r\n          </Button>\r\n            <div className={classes.root}>\r\n             <CircularProgress  style={{margin: '0 auto'}} />\r\n            </div> \r\n            </div>:\r\n          \r\n          <div>\r\n          <TextField\r\n          type=\"number\"\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"number\"\r\n            label=\"Enter Number to find square root\"\r\n            name=\"number\"\r\n            autoComplete=\"number\"\r\n            autoFocus\r\n            required=\"required\"\r\n            onChange={onChangeHandler}\r\n          />\r\n          {\r\n            required?\r\n          <p class=\"textDanger\">Please Enter a number *</p>:\r\n          <p></p>\r\n}\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onClickHandler}\r\n          >\r\n            Calculate Square Root\r\n          </Button>\r\n            <div className={classes.root}>\r\n              {\r\n                result?\r\n                <p>Square root of number {value} is : <span className=\"result\">{result}</span></p>:\r\n                <p></p>\r\n\r\n              }\r\n              \r\n            </div>\r\n            </div>\r\n}\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>  \r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport GetSquareRoot from './GetSquareRoot';\n\nfunction App() {\n  return (\n    <GetSquareRoot />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}